{"version":3,"sources":["component/form.js","component/Todo.js","component/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","setStatus","inputText","setInputText","todos","setTodos","value","type","onChange","e","target","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","App","useEffect","getLocalStorage","useState","status","setFilteredTodos","filterHandler","saveLocaltodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d2a3578d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = ({setStatus,inputText,setInputText,todos,setTodos})=>{\r\n    const inputHandler=(e)=>{\r\n        setInputText(e.target.value)\r\n    }\r\n\r\n    const submitHandler=(e)=>{\r\n        e.preventDefault();\r\n        setTodos([\r\n            ...todos,{text:inputText, completed:false, id:Math.random()*1000 }\r\n        ])\r\n        setInputText('');\r\n    }\r\n\r\n    const statusHandler=(e)=>{\r\n        setStatus(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            <input value={inputText} type=\"text\" onChange={inputHandler} className=\"todo-input\"></input>\r\n            <button className=\"todo-button\" onClick={submitHandler} type=\"submit\">\r\n                <i className=\"fas fa-plus-square\"></i>\r\n            </button>\r\n            <div className=\"select\">\r\n                <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"completed\">Completed</option>\r\n                    <option value=\"incompleted\">Incompleted</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    );\r\n} \r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Todo=({text,todo,todos,setTodos})=>{\r\n    const deleteHandler=()=>{\r\n        setTodos(todos.filter(el=> el.id!==todo.id ))\r\n    }\r\n    const completeHandler=()=>{\r\n        setTodos(todos.map((item=>{\r\n            if(item.id===todo.id){\r\n                return {\r\n                    ...item, completed:!item.completed\r\n                }\r\n            }\r\n            return item;\r\n        })))\r\n    }\r\n\r\n    return(\r\n        <div className=\"todo\">\r\n            <li className={`todo-item ${todo.completed ? \"completed\":\"\"}`}>{text}</li>\r\n            <button onClick={completeHandler} className=\"complete-btn\">\r\n                <i className=\"fas fa-check\"></i>\r\n            </button>\r\n            <button onClick={deleteHandler} className=\"trash-btn\">\r\n                <i className=\"fas fa-trash\"></i>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todo;","import React from 'react'\r\nimport Todo from './Todo'\r\n\r\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\r\n    return (\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                {filteredTodos.map(todo => (\r\n                    <Todo\r\n                        key={todo.id}\r\n                        text={todo.text}\r\n                        todos={todos}\r\n                        todo={todo}\r\n                        setTodos={setTodos}\r\n                    />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, { useState,useEffect } from 'react';\nimport './App.css';\nimport Form from './component/form';\nimport TodoList from './component/TodoList';\n\nfunction App() {\n  useEffect(()=>{\n    getLocalStorage();\n  },[])\n\n  //State\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTodos, setFilteredTodos] = useState([]);\n  \n  //useEffect\n  useEffect(()=>{\n    filterHandler();\n    saveLocaltodos();\n  },[todos,status])\n\n  //functions\n  const filterHandler = () => {\n    switch (status) {\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true))\n        break;\n      case 'incompleted':\n        setFilteredTodos(todos.filter(todo => todo.completed === false))\n        break;\n      default: setFilteredTodos(todos)\n    }\n  }\n\n  const saveLocaltodos=()=>{\n    localStorage.setItem(\"todos\", JSON.stringify(todos))\n  }\n\n  const getLocalStorage=()=>{\n    if(localStorage.getItem(\"todos\")==null)\n      localStorage.setItem(\"todos\",JSON.stringify([]))\n    else{\n      let todoLocal=JSON.parse(localStorage.getItem(\"todos\"))\n      setTodos(todoLocal);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>To-Do List</h1>\n      </header>\n      <Form\n        setStatus={setStatus}\n        inputText={inputText}\n        todos={todos}\n        setInputText={setInputText}\n        setTodos={setTodos}\n        />\n      <TodoList \n        filteredTodos={filteredTodos}\n        todos={todos} \n        setTodos={setTodos} \n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}